name: Terraform Static Web App Deploy

on:
  push:
    branches: 
      - main

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_SWA_API_KEY_OUTPUT: 'swa-api_key_output'
  TERRAFORM_WEB_APP_NAME_OUTPUT: 'webapp-name-output'
  TERRAFORM_OUTPUTS_PATH: 'terraform-outputs'
  SWA_SECRET_FILE_NAME: 'swa-secret.txt'
  WEBAPP_NAME_FILE_NAME: 'webapp-name.txt'
  
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ SECRETS.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ SECRETS.AZURE_TENANT_ID }}
  
  API_ROOT_PATH: './api'      # set this to the path to your web app project, defaults to the repository root
  WEB_ROOT_PATH: './web'      # set this to the path to your web app project, defaults to the repository root
  WEB_BUILD_OUTPUT_LOCATION: 'dist/web'
  WEB_BUILD_COMMAND: 'npm run build:prod'

jobs:
  terraform_plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:

      - uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color -input=false
  
  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        
    steps:
    - uses: actions/checkout@v4

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

  build_and_deploy_web:
    name: 'build and deploy web'
    needs: [terraform_apply]
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
      
      - uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Output SWA Api Key
        id: load-secret
        run: terraform output -raw ${{ env.TERRAFORM_SWA_API_KEY_OUTPUT }}

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.load-secret.outputs }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: ${{env.WEB_ROOT_PATH}} # App source code path
          api_location: "" # Api source code path - optional
          output_location: ${{env.WEB_BUILD_OUTPUT_LOCATION}} # Built app content directory - optional
          app_build_command: ${{env.WEB_BUILD_COMMAND}}
          ###### End of Repository/Build Configurations ######

  # build_and_deploy_api:
  #   name: 'build and deploy api'
  #   needs: [terraform_apply]
  #   runs-on: ubuntu-latest
  #   environment: production
    
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:

  #     - uses: actions/checkout@v4

  #     - name: Download Artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: ${{ env.TERRAFORM_OUTPUTS_PATH }}
  #         path: ${{ env.TERRAFORM_OUTPUTS_PATH }}
      
  #     - name: Load SWA Secret
  #       id: load-secret
  #       run: echo "AZURE_WEB_APP_NAME=$(cat ${{ env.TERRAFORM_OUTPUTS_PATH }}/${{ env.WEBAPP_NAME_FILE_NAME }})" >> $GITHUB_OUTPUT

  #     - name: Set up Node.js version
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18.x'

  #     - name: npm install, build, and test
  #       run: |
  #         npm install
  #         npm run build --if-present
  #       working-directory: api

  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

  #     - name: 'Deploy to Azure Web App'
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ steps.load-secret.outputs.AZURE_WEB_APP_NAME }}
  #         slot-name: 'Production'
  #         package: ${{ env.API_ROOT_PATH }}